version: 2.1

orbs:
  slack: circleci/slack@4.4.4

commands:
  attach:
    steps:
      - attach_workspace:
          at: /home/circleci
  install-trivy:
    steps:
      - run: curl -fSsLo trivy.deb https://github.com/aquasecurity/trivy/releases/download/v0.38.3/trivy_0.38.3_Linux-64bit.deb && sudo dpkg -i trivy.deb && rm trivy.deb
  install-submodules:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "87:b9:24:d8:b8:2f:de:8b:44:bf:da:d4:d7:2c:e1:1a"
      - run:
          command: |
            git submodule init
            git submodule sync
            git submodule update
  install-python-libraries:
    steps:
      - run: pip install pipenv
      - run: pipenv install --quiet --deploy --dev --python=3.10
  update-docker-cli:
    steps:
      - run: sudo mkdir -p /etc/apt/keyrings
      - run: sudo apt-get remove -yqq docker-ce-rootless-extras docker-scan-plugin
      - run: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
      - run: |
          echo \
            "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu focal stable" \
           | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
      - run: apt-cache madison docker-ce-cli | awk '{ print $3 }'
      - run: |
          sudo apt-get update -yqq && sudo apt-get install -yqq \
            docker-ce-cli=5:20.10.23~3-0~ubuntu-focal \
            docker-compose-plugin=2.16.0-1~ubuntu.20.04~focal
      - run: docker version
  sigopt-ninja-dns:
    steps:
      - run:
          name: Add sigopt.ninja DNS entry
          command: echo '127.0.0.1 sigopt.ninja' | sudo tee -a /etc/hosts
  compile-protobuf:
    steps:
      - run: source .env && sudo ./tools/protobuf/install.sh "$PROTOBUF_VERSION"
      - run: ./tools/protobuf/compile.sh
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/src/python/zigopt/protobuf/gen
  install-node:
    steps:
      - run: cp yarn.lock yarn.lock.old
      - run: yarn install
      - run: if ! diff yarn.lock yarn.lock.old >/dev/null; then echo 'yarn.lock has changed, make sure to `yarn install` and commit it'; exit 1; fi
      - run: rm yarn.lock.old
      - persist_to_workspace:
          root: /home/circleci
          paths:
            - project/node_modules
  start-service:
    steps:
      - run:
          name: << parameters.description >>
          command: ./ci/compose.sh up << parameters.service >>
          background: true
    parameters:
      description:
        type: string
      service:
        type: string
  start-sigopt-service:
    steps:
      - start-service:
          description: SigOpt << parameters.description >>
          service: << parameters.service >>
    parameters:
      description:
        type: string
      service:
        type: string
  docker-test-setup:
    steps:
      - run: make submodules
      - sigopt-ninja-dns
  initialize-config-directory:
    steps:
      - run:
          name: Initialize SigOpt Server config directory
          command: |
            ./ci/compose.sh run -Ti --rm init-config sh -e \<<EOF
              cp /sigopt-server/config/circleci/* /etc/sigopt/server-config/
              echo CHANGEME123 >/etc/minio/password.txt
            EOF
  integration-test-setup:
    steps:
      - run: ./ci/create_development_tls_certs.sh
      - initialize-config-directory
      - run: ./ci/compose.sh build --progress=plain test-runner
      - start-service:
          description: PostgreSQL
          service: postgres
      - run: sleep 5
      - run: ./ci/compose.sh build --progress=plain createdb
      - run: ./ci/compose.sh run --rm createdb --fake-data
      - start-service:
          description: Redis
          service: redis
      - start-service:
          description: MinIO
          service: minio
      - start-service:
          description: SMTP Test Server
          service: smtp
      - start-service:
          description: SigOpt Optimization Worker
          service: qworker
      - start-service:
          description: SigOpt Analytics Worker
          service: qworker-analytics
      - start-service:
          description: Nginx
          service: nginx
      - start-sigopt-service:
          description: API Server
          service: api
      - run: "./ci/wait_for.sh url https://sigopt.ninja:4443/api/ --user client_token:"
      - run:
          name: Set up MinIO buckets
          command: |
            ./ci/compose.sh run --rm init-minio-cookiejar
            ./ci/compose.sh run --rm init-minio-filestorage
  run-integration-test:
    steps:
      - checkout
      - docker-test-setup
      - integration-test-setup
      - run-parallel-integration-tests:
          count: << parameters.count >>
          test_path: << parameters.test_path >>
      - store-junit-test-results
    parameters:
      count:
        type: integer
        default: 1
      test_path:
        type: string
  run-parallel-integration-tests:
    steps:
      - run: |
          ./ci/compose_test.sh "<< parameters.test_path >>" \
            --count=<< parameters.count >> \
            $(circleci tests glob "test/integration<< parameters.test_path >>/**/*.py" \
              | xargs grep -l 'def test_' | circleci tests split --split-by=timings) \
            << parameters.extra_test_args >>
    parameters:
      count:
        type: integer
        default: 1
      extra_test_args:
        type: string
        default: ""
      test_path:
        type: string
  start-web-server:
    steps:
      - start-sigopt-service:
          description: Web Server
          service: web-server
      - run: ./ci/wait_for.sh url https://sigopt.ninja:4443/login
  run-browser-test:
    steps:
      - checkout
      - docker-test-setup
      - run: ./ci/compose.sh build --progress=plain test-runner web-server
      - integration-test-setup
      - start-web-server
      - run: mkdir -p screenshots/failure
      - run: mkdir -p failure_console_logs
      - run-parallel-integration-tests:
          count: << parameters.count >>
          extra_test_args: --headless
          test_path: /browser/tests/interaction<< parameters.test_path >>
      - store-junit-test-results
      - store_artifacts:
          path: screenshots/failure
          prefix: screenshots/failure
      - store_artifacts:
          path: failure_console_logs
          prefix: failure_console_logs
    parameters:
      test_path:
        type: string
      count:
        type: integer
        default: 1
  run-web-test:
    steps:
      - checkout
      - docker-test-setup
      - run: ./ci/compose.sh build --progress=plain test-runner web-server
      - integration-test-setup
      - start-web-server
      - run-parallel-integration-tests:
          count: << parameters.count >>
          test_path: /web
      - store_test_results:
          path: junit-results
    parameters:
      count:
        type: integer
        default: 1
  run-zigopt-test:
    steps:
      - attach
      - install-python-libraries
      - run: pipenv run ./test/unit_tests.sh --junitxml=junit-results/unit-tests/junit.xml --count=<< parameters.count >> test/python/sigopttest
      - store_test_results:
          path: junit-results
    parameters:
      count:
        type: integer
        default: 1
  store-junit-test-results:
    steps:
      - store_test_results:
          path: junit-results
      - store_artifacts:
          path: junit-results
          prefix: junit-results
  generate-openapi-docs:
    steps:
      - checkout
      - attach
      - install-python-libraries
      - run:
          name: Generate swagger file
          command: pipenv run env SIGOPT_SERVER_CONFIG_DIR=./config/circleci ./pp src/python/zigopt/api/documentation.py
          environment:
            SIGOPT_SWAGGER_PATH: /home/circleci/project/
            SIGOPT_SWAGGER_FILENAME: swagger.json
      - persist_to_workspace:
          root: /home/circleci/
          paths:
            - project
  validate-openapi-docs:
    steps:
      - attach
      - install-submodules
      - run:
          name: Check that swagger file exists and validate it with swagger validator
          command: node ./ci/validate_swagger.js /home/circleci/project/swagger.json
  notify-slack-on-fail:
    steps:
      - slack/notify:
          branch_pattern: master
          channel: sigopt-platform-ci
          event: fail
          custom: |
            {
              "blocks": [
                {
                  "text": {
                    "text": "*$CIRCLE_JOB* _failed_ in *$CIRCLE_PROJECT_REPONAME* (*$CIRCLE_BRANCH*): <${CIRCLE_BUILD_URL}|View Workflow>",
                    "type": "mrkdwn"
                  },
                  "type": "section"
                }
              ]
            }

executors:
  sigopt-build:
    machine:
      image: &ubuntu-executor-image ubuntu-2004:2022.10.1
    resource_class: large
  basic:
    docker:
      - image: cimg/base:current-22.04
  sigopt-python-only:
    docker:
      - image: cimg/python:3.10
    resource_class: small
  sigopt-node-only:
    docker:
      - image: cimg/node:16.18
    resource_class: small
  sigopt-integration:
    machine:
      image: *ubuntu-executor-image
    resource_class: medium
  sigopt-browser-integration:
    machine:
      image: *ubuntu-executor-image
    resource_class: large
  sigopt-mcafee:
    machine:
      image: *ubuntu-executor-image
    resource_class: xlarge
  sigopt-lite:
    docker:
      - image: cimg/base:2022.11
    resource_class: small

jobs:
  checkout-code:
    docker:
      - image: alpine/git
    resource_class: small
    steps:
      - checkout
      - run: git reflog expire --expire=now --all
      - run: git repack -ad
      - run: git prune
      - persist_to_workspace:
          root: /root
          paths:
            - .ssh
            - project
  pre-commit:
    machine:
      image: *ubuntu-executor-image
    resource_class: medium
    steps:
      - attach
      - run: pyenv global 3.10.6
      - run: pip install pipenv
      - run: pipenv install --quiet --deploy --dev --python=3.10
      - run: source .env && sudo ./tools/protobuf/install.sh "$PROTOBUF_VERSION"
      - run: pipenv run ./tools/protobuf/compile.sh
      - run: pipenv run pre-commit validate-config
      - run: pipenv run pre-commit run --all-files eslint
      - run: pipenv run pre-commit run --all-files hadolint-docker
      - run: pipenv run pre-commit run --all-files pylint
      - run: pipenv run pre-commit run --all-files shellcheck
      - run: git diff
  check-integration-test-inits:
    executor: sigopt-lite
    steps:
      - checkout
      - run:
          name: Checking that __init__.py files are present in test/integration/
          command: |
            rc=0
            for dir in $(find test/integration -type d); do
              if ! [ -f "$dir/__init__.py" ]; then
                echo "__init__.py file missing: $dir/__init__.py"
                rc=1
              fi
            done
            if [ $rc -ne 0 ]; then
              echo 'Some __init__.py files are missing in test/integration/. Run `./scripts/dev/ensure_inits.sh` and commit the changes.'
            fi
            exit $rc
  trivy-scan-images:
    executor: sigopt-build
    resource_class: medium
    steps:
      - checkout
      - run: pyenv global 3.10.6
      - install-submodules
      - install-trivy
      - run: ./ci/trivy_scan_images.sh --ignore-unfixed --debug
      - store_artifacts:
          path: artifacts/trivy/
  trivy-scan-project:
    docker:
      - image: cimg/base:stable
    resource_class: medium
    steps:
      - checkout
      - install-trivy
      - run: mkdir -p artifacts/trivy && trivy fs . --debug
      - store_artifacts:
          path: artifacts/trivy/
  yarn-audit:
    executor: sigopt-node-only
    resource_class: small
    steps:
      - checkout
      - run: yarn audit
  test-docker-deployment:
    executor: sigopt-build
    resource_class: xlarge
    steps:
      - checkout
      - update-docker-cli
      - sigopt-ninja-dns
      - run: mkdir -p scratch
      - run: |
          set -o pipefail
          EDITOR=true ./setup.sh | tee scratch/setup_output.log
      - run:
          command: ./start.sh
          background: true
      - run: ./ci/wait_for.sh url https://sigopt.ninja:4443/login
      - run: ./ci/wait_for.sh url https://sigopt.ninja:4443/api/health
      - run: |
          EMAIL="$(tail -n 2 scratch/setup_output.log | grep -E '^  email:' | awk -F': ' '{ print $2 }')"
          PASSWORD="$(tail -n 2 scratch/setup_output.log | grep -E '^  password:' | awk -F': ' '{ print $2 }')"
          curl -fk -X POST https://sigopt.ninja:4443/api/v1/sessions -d '{"email": "'"$EMAIL"'", "password": "'"$PASSWORD"'"}'
  test-docker-development:
    executor: sigopt-build
    resource_class: xlarge
    steps:
      - checkout
      - update-docker-cli
      - run: ./ci/create_development_tls_certs.sh
      - sigopt-ninja-dns
      - run: make submodules fix-db setup-cookiejar setup-filestorage
      - run: ./scripts/launch/start_zigopt_services.sh || ./scripts/launch/start_zigopt_services.sh
      - run:
          name: Development services
          command: ./scripts/launch/all_live.sh
          background: true
      - run: ./ci/wait_for.sh url https://sigopt.ninja:4443/login
      - run: "./ci/wait_for.sh url https://sigopt.ninja:4443/api/ --user client_token:"
      - run: |
          curl -fk -X POST https://sigopt.ninja:4443/api/v1/sessions -d '{"email": "owner@sigopt.ninja", "password": "owner"}'
      - run: |
          ./test/test_dev_env.sh \
            test/integration/browser/tests/interaction/global/email_test.py \
            test/integration/v1/endpoints/training_runs/files_test.py
  compile-protobuf:
    executor: basic
    resource_class: small
    steps:
      - checkout
      - compile-protobuf
  setup-web:
    executor: sigopt-node-only
    resource_class: large
    steps:
      - checkout
      - run: sudo apt-get update -yqq && sudo apt-get install nasm
      - install-node
  browser-integration:
    executor: sigopt-browser-integration
    parallelism: 2
    steps:
      - run-browser-test:
          test_path: ""
  js-lint:
    executor: sigopt-node-only
    steps:
      - attach
      - install-submodules
      - run: git ls-files '*.js' | xargs yarn -s eslint
  check-node-dependencies:
    executor: sigopt-node-only
    steps:
      - attach
      - install-submodules
      - run: ./ci/check_node_deps.sh
  web-unit:
    executor: sigopt-node-only
    steps:
      - attach
      - install-submodules
      - run: JEST_JUNIT_OUTPUT=junit-results/jest/junit.xml yarn test --reporters=default --reporters=jest-junit --runInBand --ci
      - store_test_results:
          path: junit-results
  web-dead-code:
    executor: sigopt-node-only
    steps:
      - attach
      - install-submodules
      - run: make web-dead-code
  web-integration:
    executor: sigopt-integration
    resource_class: large
    steps:
      - run-web-test
  documentation-generation:
    executor: sigopt-python-only
    steps:
      - generate-openapi-docs
  documentation-validation:
    executor: sigopt-node-only
    steps:
      - validate-openapi-docs
  v1-integration:
    executor: sigopt-integration
    parallelism: 3
    steps:
      - run-integration-test:
          test_path: /v1
  client-integration:
    executor: sigopt-integration
    steps:
      - checkout
      - docker-test-setup
      - integration-test-setup
      - start-service:
          description: Mongodb
          service: mongodb
      - run:
          name: Create test container
          command: ./ci/compose.sh build --progress=plain test-client
      - run:
          name: Client Integration Test
          command: ./ci/compose.sh run test-client test/run_client_integration_tests.sh main
  service-integration:
    executor: sigopt-integration
    steps:
      - run-integration-test:
          test_path: /service
  worker-health:
    executor: sigopt-integration
    steps:
      - checkout
      - docker-test-setup
      - initialize-config-directory
      - start-service:
          description: PostgreSQL
          service: postgres
      - run: sleep 5
      - run: ./ci/compose.sh build --progress=plain createdb
      - run: ./ci/compose.sh run createdb
      - run: ./ci/compose.sh build --progress=plain qworker qworker-analytics
      - run: ./ci/worker_health_fail.sh
      - run: ./ci/compose.sh create redis
      - start-service:
          description: Redis
          service: redis
      - run: ./ci/worker_health_pass.sh
  zigopt-unit:
    executor: sigopt-python-only
    steps:
      - run-zigopt-test
  disclaimers-lint:
    executor: sigopt-python-only
    steps:
      - checkout
      - run: ./tools/lint/common/check_copyright_and_license_disclaimers.py .
  eval-circleci:
    docker:
      - image: circleci/buildpack-deps:curl
    resource_class: small
    steps:
      # Fails on non-20x error code, https://superuser.com/a/1249678
      - run: "curl -X POST --silent --show-error --fail -u ${EVAL_FRAMEWORK_BUILD_TOKEN}: https://circleci.com/api/v2/project/gh/sigopt/eval-framework/pipeline"

workflows:
  main:
    jobs:
      - checkout-code
      - pre-commit:
          requires:
            - checkout-code
            - setup-web
      - check-integration-test-inits
      - trivy-scan-images
      - trivy-scan-project
      - yarn-audit
      - test-docker-deployment
      - test-docker-development
      - setup-web
      - compile-protobuf
      - v1-integration
      - client-integration
      - browser-integration
      - service-integration
      - worker-health
      - web-integration
      - check-node-dependencies:
          requires:
            - checkout-code
            - setup-web
      - web-dead-code:
          requires:
            - checkout-code
            - setup-web
      - web-unit:
          requires:
            - checkout-code
            - setup-web
      - zigopt-unit:
          requires: &zigopt-unit-requires
            - checkout-code
            - compile-protobuf
      - documentation-generation:
          requires:
            - compile-protobuf
      - documentation-validation:
          requires:
            - setup-web
            - documentation-generation
      - js-lint:
          requires:
            - checkout-code
            - setup-web
  nightly:
    jobs:
      - trivy-scan-images
      - trivy-scan-project
      - test-docker-deployment
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - main
